import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_draggable_list/flutter_draggable_list.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:http/http.dart' as http;
import '../../../constants.dart';
import '../../../util/service/application_service.dart';
import 'components/app_task_card.dart';

class ApplicationDetail extends StatefulWidget {
  const ApplicationDetail(
      {required this.applicationId, required this.university, super.key});

  final String applicationId;
  final String university;

  @override
  State<ApplicationDetail> createState() => _ApplicationDetailState();
}

class _ApplicationDetailState extends State<ApplicationDetail> {
  final FirestoreService _firestoreService = FirestoreService();
  List<Map<String, dynamic>> tasksInProgress = [];
  List<Map<String, dynamic>> tasksCompleted = [];
  bool isLoading = true;
  bool generatingEssay = false;

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  late String _initialCountry;
  late String _initialProgram;
  late String _initialBackground;
  late String _initialLanguage;
  late String _initialBudget;
  final String _username = 'James Doe';

  @override
  void initState() {
    super.initState();
    fetchTasks();
    _fetchUserProfile();
  }

  Future<void> _fetchUserProfile() async {
    User? user = _auth.currentUser;
    try {
      DocumentSnapshot userDoc =
          await _firestore.collection('profiles').doc(user?.uid).get();
      setState(() {
        _initialCountry = userDoc['countriesOfInterest'];
        _initialProgram = userDoc['studyPreferences'];
        _initialBackground = userDoc['academicBackground'];
        _initialLanguage = userDoc['languageProficiency'];
        _initialBudget = userDoc['budgetRange'];
      });
    } catch (e) {
      Fluttertoast.showToast(msg: 'Error fetching user profile: $e');
    }
  }

  Future<void> fetchTasks() async {
    var allTasks = await _firestoreService.fetchTasks(widget.applicationId);
    tasksInProgress = allTasks.where((task) => !task['completed']).toList();
    tasksCompleted = allTasks.where((task) => task['completed']).toList();
    setState(() {
      isLoading = false;
    });
  }

  Future<void> generateEssay(
      {required String country,
      required String program,
      required String language,
      required String budget,
      required String background}) async {
    try {
      setState(() {
        generatingEssay = true;
      });
      final response = await http.post(
        Uri.parse('$webAPIUrl/generate_sop'),
        headers: {
          "Access-Control-Allow-Origin": "*",
          'Content-Type': 'application/json',
          'Accept': '*/*'
        },
        body: json.encode({
          'study_level': background,
          'program': program,
          'budget': budget,
          'conversation_id': "1",
          'university': widget.university,
          'user': _username
        }), //todo: conversation_id
      );

      if (response.statusCode == 200) {
        Map<String, dynamic> data = json.decode(response.body);
        var botResponse = data['response'];
        final essay = botResponse;
        _showEssayPopup(essay);
        setState(() {
          generatingEssay = false;
        });
      } else {
        // print('Failed to generate essay: ${response.body}');
        setState(() {
          generatingEssay = false;
        });
      }
    } catch (e) {
      // print('Error generating essay: $e');
      setState(() {
        generatingEssay = false;
      });
    }
  }

  void _showEssayPopup(String essay) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Generated Essay'),
        content: SingleChildScrollView(
          child: Column(
            children: [
              const Text(
                'This essay was generated by an AI. Please review and modify it as needed before submission.',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 10),
              SelectableText(essay),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  void toggleTaskCompletion(Map<String, dynamic> task) async {
    final updatedTask = {...task, 'completed': !task['completed']};
    await _firestoreService.updateTask(widget.applicationId, updatedTask);
    fetchTasks();
  }

  @override
  Widget build(BuildContext context) {
    return isLoading
        ? const Center(child: CircularProgressIndicator())
        :
        Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: DragTarget<Map<String, dynamic>>(
                    builder: (context, candidateData, rejectedData) {
                      return SizedBox(
                        height: MediaQuery.of(context).size.height * 0.8,
                        width: 320,
                        child: Column(
                          children: [
                            const Text('In Progress',
                                style: TextStyle(
                                    fontSize: 18, fontWeight: FontWeight.bold)),
                            ListView.builder(
                              itemCount: tasksInProgress.length,
                              scrollDirection: Axis.vertical,
                              shrinkWrap: true,
                              itemBuilder: (context, index) {
                                var task = tasksInProgress[index];
                                return Draggable<Map<String, dynamic>>(
                                  data: task,
                                  feedback: Material(
                                    child:
                                        AppTaskCard(task: task, onTap: () {}),
                                  ),
                                  childWhenDragging: Container(),
                                  child: AppTaskCard(
                                      task: task,
                                      onTap: (task['isEssay'] ?? false)
                                          ? () => generateEssay(
                                                country: _initialCountry,
                                                program: _initialProgram,
                                                language: _initialLanguage,
                                                budget: _initialBudget,
                                                background: _initialBackground,
                                              )
                                          : null),
                                );
                              },
                            ),
                          ],
                        ),
                      );
                    },
                    onAccept: (task) {
                      setState(() {
                        tasksInProgress.add(task);
                        tasksCompleted.remove(task);
                        toggleTaskCompletion(task);
                      });
                      // _firestoreService.updateTask(widget.applicationId, task);
                    },
                  ),
                ),
              ),
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: DragTarget<Map<String, dynamic>>(
                    builder: (context, candidateData, rejectedData) {
                      return SizedBox(
                        height: MediaQuery.of(context).size.height * 0.8,
                        width: 320,
                        child: Column(
                          children: [
                            const Text('Completed',
                                style: TextStyle(
                                    fontSize: 18, fontWeight: FontWeight.bold)),
                            ListView.builder(
                              itemCount: tasksCompleted.length,
                              scrollDirection: Axis.vertical,
                              shrinkWrap: true,
                              itemBuilder: (context, index) {
                                var task = tasksCompleted[index];
                                return Draggable<Map<String, dynamic>>(
                                  data: task,
                                  feedback: Material(
                                    child:
                                        AppTaskCard(task: task, onTap: () {}),
                                  ),
                                  childWhenDragging: Container(),
                                  child: AppTaskCard(task: task, onTap: () {}),
                                );
                              },
                            ),
                          ],
                        ),
                      );
                    },
                    onAccept: (task) {
                      setState(() {
                        tasksCompleted.add(task);
                        tasksInProgress.remove(task);
                        toggleTaskCompletion(task);
                      });
                      // _firestoreService.updateTask(widget.applicationId, task);
                    },
                  ),
                ),
              ),
              generatingEssay ? const CircularProgressIndicator() : const SizedBox()
            ],
          );
  }
}
